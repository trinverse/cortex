name: Update AUR Package

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish'
        required: true

jobs:
  update-aur:
    name: Update AUR Package
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${{ github.event.release.tag_name }}"
            VERSION="${VERSION#v}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      
      - name: Download source tarball
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          wget -q "https://github.com/${{ github.repository }}/archive/v$VERSION.tar.gz" -O cortex-$VERSION.tar.gz
      
      - name: Calculate checksum
        id: checksum
        run: |
          SHA256=$(sha256sum cortex-*.tar.gz | cut -d' ' -f1)
          echo "sha256=$SHA256" >> $GITHUB_OUTPUT
      
      - name: Update PKGBUILD
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          SHA256="${{ steps.checksum.outputs.sha256 }}"
          
          cat > PKGBUILD << EOF
          # Maintainer: Cortex Team <aur@cortex-fm.io>
          pkgname=cortex
          pkgver=$VERSION
          pkgrel=1
          pkgdesc="Modern terminal file manager"
          arch=('x86_64' 'aarch64')
          url="https://github.com/${{ github.repository }}"
          license=('MIT')
          depends=('gcc-libs')
          makedepends=('rust' 'cargo')
          source=("https://github.com/${{ github.repository }}/archive/v\${pkgver}.tar.gz")
          sha256sums=('$SHA256')
          
          build() {
            cd "\$pkgname-\$pkgver"
            export RUSTUP_TOOLCHAIN=stable
            export CARGO_TARGET_DIR=target
            cargo build --frozen --release --all-features
          }
          
          check() {
            cd "\$pkgname-\$pkgver"
            export RUSTUP_TOOLCHAIN=stable
            cargo test --frozen --all-features
          }
          
          package() {
            cd "\$pkgname-\$pkgver"
            install -Dm755 "target/release/\$pkgname" "\$pkgdir/usr/bin/\$pkgname"
            install -Dm644 "LICENSE" "\$pkgdir/usr/share/licenses/\$pkgname/LICENSE"
            install -Dm644 "README.md" "\$pkgdir/usr/share/doc/\$pkgname/README.md"
          }
          EOF
      
      - name: Generate .SRCINFO
        run: |
          # Install makepkg dependencies
          sudo apt-get update
          sudo apt-get install -y libarchive-tools
          
          # Generate .SRCINFO
          makepkg --printsrcinfo > .SRCINFO
      
      - name: Publish to AUR
        env:
          AUR_SSH_KEY: ${{ secrets.AUR_SSH_KEY }}
        run: |
          # Setup SSH
          mkdir -p ~/.ssh
          echo "$AUR_SSH_KEY" > ~/.ssh/aur
          chmod 600 ~/.ssh/aur
          
          cat >> ~/.ssh/config << EOF
          Host aur.archlinux.org
            IdentityFile ~/.ssh/aur
            User aur
          EOF
          
          # Clone AUR repository
          git clone ssh://aur@aur.archlinux.org/cortex.git aur-cortex || {
            # If package doesn't exist, create it
            git init aur-cortex
            cd aur-cortex
            git remote add origin ssh://aur@aur.archlinux.org/cortex.git
          }
          
          cd aur-cortex
          
          # Update files
          cp ../PKGBUILD .
          cp ../.SRCINFO .
          
          # Commit and push
          git config user.name "Cortex Bot"
          git config user.email "bot@cortex-fm.io"
          git add PKGBUILD .SRCINFO
          git commit -m "Update to version ${{ steps.get_version.outputs.version }}"
          git push origin master