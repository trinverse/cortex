name: Publish to PPA (All Versions)

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish'
        required: true
        default: '0.1.0'
      distribution:
        description: 'Ubuntu distribution(s)'
        required: true
        type: choice
        default: 'all'
        options:
          - all              # All stable (focal, jammy, noble, oracular)
          - all-including-dev # All including development (+ plucky)
          - focal            # 20.04 LTS only
          - jammy            # 22.04 LTS only
          - noble            # 24.04 LTS only
          - oracular         # 24.10 only
          - plucky           # 25.04 dev only
          - lts-only         # LTS versions only (focal, jammy, noble)

jobs:
  prepare:
    name: Prepare Distribution List
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Set up distribution matrix
        id: set-matrix
        env:
          DIST_CHOICE: ${{ github.event.inputs.distribution }}
        run: |
          case "$DIST_CHOICE" in
            "all")
              DISTS='["focal", "jammy", "noble", "oracular"]'
              ;;
            "all-including-dev")
              DISTS='["focal", "jammy", "noble", "oracular", "plucky"]'
              ;;
            "lts-only")
              DISTS='["focal", "jammy", "noble"]'
              ;;
            *)
              DISTS='["'$DIST_CHOICE'"]'
              ;;
          esac
          echo "matrix={\"dist\":$DISTS}" >> $GITHUB_OUTPUT
          echo "Building for: $DISTS"

  publish:
    name: Publish ${{ matrix.dist }} to PPA
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.prepare.outputs.matrix) }}
      max-parallel: 2  # Limit parallel uploads to avoid conflicts
    
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            devscripts debhelper dput gnupg lintian \
            build-essential cargo rustc pkg-config libssl-dev
      
      - name: Vendor Rust dependencies
        run: |
          # Vendor all dependencies for offline build
          cargo vendor --versioned-dirs vendor
          
          # Create cargo config to use vendored deps
          mkdir -p .cargo
          cat > .cargo/config.toml << 'EOF'
          [source.crates-io]
          replace-with = "vendored-sources"
          
          [source.vendored-sources]
          directory = "vendor"
          EOF
      
      - name: Setup GPG
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          echo "$GPG_PRIVATE_KEY" | base64 --decode | gpg --batch --import
          mkdir -p ~/.gnupg
          echo "use-agent" >> ~/.gnupg/gpg.conf
          echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
          echo "allow-preset-passphrase" >> ~/.gnupg/gpg-agent.conf
          gpg-connect-agent reloadagent /bye
      
      - name: Prepare source package
        env:
          VERSION: ${{ github.event.inputs.version }}
          DIST: ${{ matrix.dist }}
        run: |
          # Set version with distribution suffix
          if [ "$DIST" = "focal" ]; then
            FULL_VERSION="${VERSION}-1ubuntu1"
          else
            FULL_VERSION="${VERSION}-1ubuntu1~${DIST}1"
          fi
          
          echo "Building version $FULL_VERSION for $DIST"
          
          # Create build directory
          BUILD_DIR=~/ppa-build
          mkdir -p $BUILD_DIR
          
          # Prepare source
          WORK_DIR="$BUILD_DIR/cortex-${VERSION}"
          rm -rf "$WORK_DIR"
          mkdir -p "$WORK_DIR"
          
          # Copy source
          tar --exclude='.git' --exclude='target' --exclude='*.deb' -cf - . | \
            (cd "$WORK_DIR" && tar -xf -)
          
          # Create orig tarball
          cd "$BUILD_DIR"
          tar czf "cortex_${VERSION}.orig.tar.gz" "cortex-${VERSION}"
          
          echo "WORK_DIR=$WORK_DIR" >> $GITHUB_ENV
          echo "BUILD_DIR=$BUILD_DIR" >> $GITHUB_ENV
          echo "FULL_VERSION=$FULL_VERSION" >> $GITHUB_ENV
      
      - name: Create debian files
        working-directory: ${{ env.WORK_DIR }}
        env:
          VERSION: ${{ github.event.inputs.version }}
          DIST: ${{ matrix.dist }}
          DEBEMAIL: ${{ secrets.DEBEMAIL }}
          DEBFULLNAME: ${{ secrets.DEBFULLNAME }}
        run: |
          mkdir -p debian/source
          echo "3.0 (quilt)" > debian/source/format
          # Don't create debian/compat - using debhelper-compat in control file instead
          
          # Create control file
          cat > debian/control << 'CONTROL_END'
          Source: cortex
          Section: utils
          Priority: optional
          Maintainer: Ashish Tyagi <ashishtyagi10@gmail.com>
          Build-Depends: debhelper-compat (= 12),
                         cargo,
                         rustc (>= 1.70),
                         pkg-config
          Standards-Version: 4.5.1
          Homepage: https://github.com/trinverse/cortex
          
          Package: cortex
          Architecture: any
          Depends: ${shlibs:Depends}, ${misc:Depends}
          Description: Modern terminal file manager
           Cortex is a powerful terminal file manager written in Rust.
           Features dual-pane interface, vim-style navigation, and plugin support.
          CONTROL_END
          
          # Fix indentation
          sed -i 's/^          //' debian/control
          
          # Create rules file
          cat > debian/rules << 'RULES_END'
          #!/usr/bin/make -f
          
          export DH_VERBOSE = 1
          export CARGO_HOME = $(CURDIR)/debian/cargo
          
          %:
          	dh $@
          
          override_dh_auto_build:
          	# Use vendored dependencies (offline build)
          	cargo build --release --locked --offline
          
          override_dh_auto_install:
          	install -Dm755 target/release/cortex debian/cortex/usr/bin/cortex
          
          override_dh_auto_test:
          	# Skip tests during PPA build
          
          override_dh_auto_clean:
          	cargo clean
          	dh_auto_clean
          RULES_END
          
          # Fix indentation and make executable
          sed -i 's/^          //' debian/rules
          chmod +x debian/rules
          
          # Create changelog
          cat > debian/changelog << CHANGELOG_END
          cortex (${FULL_VERSION}) ${DIST}; urgency=medium
          
            * Release version ${VERSION} for Ubuntu ${DIST}
            * Modern terminal file manager with dual-pane interface
            * Plugin system with Lua support
            * Advanced file operations and vim-style navigation
          
           -- ${DEBFULLNAME} <${DEBEMAIL}>  $(date -R)
          CHANGELOG_END
          
          # Create copyright
          cat > debian/copyright << 'COPYRIGHT_END'
          Format: https://www.debian.org/doc/packaging-manuals/copyright-format/1.0/
          Upstream-Name: cortex
          Source: https://github.com/trinverse/cortex
          
          Files: *
          Copyright: 2024-2025 Trinverse
          License: MIT
           Permission is hereby granted, free of charge, to any person obtaining a
           copy of this software and associated documentation files (the "Software"),
           to deal in the Software without restriction.
          COPYRIGHT_END
          
          # Fix indentation
          sed -i 's/^          //' debian/copyright
      
      - name: Build source package
        working-directory: ${{ env.BUILD_DIR }}
        env:
          GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          cd cortex-*
          
          # Build with GPG signing
          echo "$GPG_PASSPHRASE" | debuild -S -sa -d \
            -k"$GPG_KEY_ID" \
            -p"gpg --batch --yes --passphrase-fd 0 --pinentry-mode loopback"
      
      - name: Upload to PPA
        working-directory: ${{ env.BUILD_DIR }}
        env:
          LAUNCHPAD_USERNAME: ${{ secrets.LAUNCHPAD_USERNAME }}
        run: |
          # Configure dput
          cat > ~/.dput.cf << DPUT_END
          [cortex-ppa]
          fqdn = ppa.launchpad.net
          method = ftp
          incoming = ~${LAUNCHPAD_USERNAME}/ubuntu/cortex
          login = anonymous
          allow_unsigned_uploads = 0
          DPUT_END
          
          # Upload to PPA
          dput cortex-ppa *.changes
          
          echo "âœ… Successfully uploaded ${{ matrix.dist }} to PPA"
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ppa-${{ matrix.dist }}-${{ github.event.inputs.version }}
          path: ${{ env.BUILD_DIR }}/*.changes
  
  summary:
    name: Deployment Summary
    needs: publish
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Summary
        env:
          VERSION: ${{ github.event.inputs.version }}
          DIST: ${{ github.event.inputs.distribution }}
        run: |
          echo "## ðŸ“¦ PPA Deployment Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Configuration:" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: $VERSION" >> $GITHUB_STEP_SUMMARY
          echo "- **Distribution Choice**: $DIST" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Check build status: https://launchpad.net/~${{ secrets.LAUNCHPAD_USERNAME }}/+archive/ubuntu/cortex" >> $GITHUB_STEP_SUMMARY
          echo "2. Wait 15-60 minutes for Launchpad to build packages" >> $GITHUB_STEP_SUMMARY
          echo "3. Install with:" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "sudo add-apt-repository ppa:${{ secrets.LAUNCHPAD_USERNAME }}/cortex" >> $GITHUB_STEP_SUMMARY
          echo "sudo apt update" >> $GITHUB_STEP_SUMMARY
          echo "sudo apt install cortex" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY