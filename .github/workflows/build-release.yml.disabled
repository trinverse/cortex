name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  # Create GitHub Release
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/v}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          release_name: Cortex v${{ steps.get_version.outputs.version }}
          draft: true
          prerelease: false
          body: |
            # Cortex v${{ steps.get_version.outputs.version }}
            
            ## What's New
            - TODO: Add release notes
            
            ## Downloads
            See assets below for platform-specific packages.
            
            ## Installation
            
            ### Windows
            - Download the `.msi` installer
            - Or install via Chocolatey: `choco install cortex`
            
            ### macOS
            - Download the `.dmg` file
            - Or install via Homebrew: `brew install cortex`
            
            ### Linux
            - **Ubuntu/Debian**: Download the `.deb` package
            - **Arch**: Install from AUR: `yay -S cortex`
            - **Other**: Download the `.tar.gz` archive
            
            ## Checksums
            See `checksums.txt` in the release assets.

  # Build for Linux
  build-linux:
    name: Build Linux
    needs: create-release
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        target: [x86_64-unknown-linux-gnu, aarch64-unknown-linux-gnu]
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Install cross-compilation tools
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libx11-dev libxcb1-dev
      
      - name: Build
        run: |
          if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
            export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
          fi
          cargo build --release --target ${{ matrix.target }}
      
      - name: Create tarball
        run: |
          cd target/${{ matrix.target }}/release
          tar czf cortex-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.tar.gz cortex
          mv *.tar.gz ../../../
      
      - name: Upload tarball
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./cortex-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.tar.gz
          asset_name: cortex-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.tar.gz
          asset_content_type: application/gzip
  
  # Build Debian package
  build-deb:
    name: Build Debian Package
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install packaging tools
        run: |
          sudo apt-get update
          sudo apt-get install -y dpkg-dev debhelper devscripts
      
      - name: Build release binary
        run: cargo build --release
      
      - name: Create Debian package
        run: |
          VERSION=${{ needs.create-release.outputs.version }}
          mkdir -p debian-build/DEBIAN
          mkdir -p debian-build/usr/bin
          mkdir -p debian-build/usr/share/applications
          mkdir -p debian-build/usr/share/doc/cortex
          
          # Copy binary
          cp target/release/cortex debian-build/usr/bin/
          chmod 755 debian-build/usr/bin/cortex
          
          # Create control file
          cat > debian-build/DEBIAN/control << EOF
          Package: cortex
          Version: ${VERSION}
          Section: utils
          Priority: optional
          Architecture: amd64
          Maintainer: Cortex Team <support@cortex-fm.io>
          Description: Modern terminal file manager
           Cortex is a powerful, fast terminal file manager written in Rust
           with advanced features for power users.
          EOF
          
          # Create desktop entry
          cat > debian-build/usr/share/applications/cortex.desktop << EOF
          [Desktop Entry]
          Name=Cortex
          Comment=Terminal File Manager
          Exec=cortex
          Terminal=true
          Type=Application
          Categories=System;FileTools;
          EOF
          
          # Build package
          dpkg-deb --build debian-build cortex_${VERSION}_amd64.deb
      
      - name: Upload Debian package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./cortex_${{ needs.create-release.outputs.version }}_amd64.deb
          asset_name: cortex_${{ needs.create-release.outputs.version }}_amd64.deb
          asset_content_type: application/vnd.debian.binary-package

  # Build for Windows
  build-windows:
    name: Build Windows
    needs: create-release
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Build
        run: cargo build --release
      
      - name: Install WiX Toolset
        run: |
          dotnet tool install --global wix
          wix extension add WixToolset.UI.wixext
      
      - name: Create MSI installer
        run: |
          $version = "${{ needs.create-release.outputs.version }}"
          
          # Create WiX source file
          @"
          <?xml version='1.0' encoding='UTF-8'?>
          <Wix xmlns='http://wixtoolset.org/schemas/v4/wxs'>
            <Package Name='Cortex' 
                     Manufacturer='Cortex Team'
                     Version='$version'
                     UpgradeCode='12345678-1234-1234-1234-123456789012'>
              
              <MajorUpgrade DowngradeErrorMessage='A newer version is already installed.' />
              <MediaTemplate EmbedCab='yes' />
              
              <Feature Id='Main' Title='Cortex' Level='1'>
                <ComponentGroupRef Id='MainComponent' />
              </Feature>
              
              <StandardDirectory Id='ProgramFiles64Folder'>
                <Directory Id='INSTALLDIR' Name='Cortex'>
                  <Component Id='MainExecutable' Guid='87654321-4321-4321-4321-210987654321'>
                    <File Id='CortexExe' Source='target\release\cortex.exe' KeyPath='yes'>
                      <Shortcut Id='StartMenuShortcut' 
                                Directory='ProgramMenuFolder' 
                                Name='Cortex'
                                WorkingDirectory='INSTALLDIR'
                                Advertise='yes' />
                    </File>
                  </Component>
                </Directory>
              </StandardDirectory>
              
              <StandardDirectory Id='ProgramMenuFolder' />
              
              <ComponentGroup Id='MainComponent'>
                <ComponentRef Id='MainExecutable' />
              </ComponentGroup>
              
            </Package>
          </Wix>
          "@ | Out-File -FilePath cortex.wxs -Encoding UTF8
          
          # Build MSI
          wix build cortex.wxs -o cortex-$version-x64.msi
      
      - name: Create ZIP archive
        run: |
          Compress-Archive -Path target\release\cortex.exe -DestinationPath cortex-${{ needs.create-release.outputs.version }}-windows-x64.zip
      
      - name: Upload MSI
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./cortex-${{ needs.create-release.outputs.version }}-x64.msi
          asset_name: cortex-${{ needs.create-release.outputs.version }}-x64.msi
          asset_content_type: application/x-msi
      
      - name: Upload ZIP
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./cortex-${{ needs.create-release.outputs.version }}-windows-x64.zip
          asset_name: cortex-${{ needs.create-release.outputs.version }}-windows-x64.zip
          asset_content_type: application/zip

  # Build for macOS
  build-macos:
    name: Build macOS
    needs: create-release
    runs-on: macos-latest
    strategy:
      matrix:
        target: [x86_64-apple-darwin, aarch64-apple-darwin]
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Build
        run: cargo build --release --target ${{ matrix.target }}
      
      - name: Create tarball
        run: |
          cd target/${{ matrix.target }}/release
          tar czf cortex-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.tar.gz cortex
          mv *.tar.gz ../../../
      
      - name: Upload tarball
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./cortex-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.tar.gz
          asset_name: cortex-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.tar.gz
          asset_content_type: application/gzip
  
  # Create universal macOS binary
  build-macos-universal:
    name: Build macOS Universal
    needs: [create-release, build-macos]
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-apple-darwin,aarch64-apple-darwin
      
      - name: Build both architectures
        run: |
          cargo build --release --target x86_64-apple-darwin
          cargo build --release --target aarch64-apple-darwin
      
      - name: Create universal binary
        run: |
          lipo -create \
            target/x86_64-apple-darwin/release/cortex \
            target/aarch64-apple-darwin/release/cortex \
            -output cortex-universal
          chmod +x cortex-universal
      
      - name: Create DMG
        run: |
          VERSION=${{ needs.create-release.outputs.version }}
          mkdir -p dmg-content
          cp cortex-universal dmg-content/Cortex
          
          # Create a simple DMG
          hdiutil create -volname "Cortex $VERSION" \
                        -srcfolder dmg-content \
                        -ov -format UDZO \
                        cortex-$VERSION-universal.dmg
      
      - name: Upload DMG
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./cortex-${{ needs.create-release.outputs.version }}-universal.dmg
          asset_name: cortex-${{ needs.create-release.outputs.version }}-universal.dmg
          asset_content_type: application/x-apple-diskimage

  # Generate checksums
  generate-checksums:
    name: Generate Checksums
    needs: [create-release, build-linux, build-deb, build-windows, build-macos-universal]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v5
        with:
          path: ./artifacts
      
      - name: Generate checksums
        run: |
          cd artifacts
          sha256sum * > checksums.txt
          cat checksums.txt
      
      - name: Upload checksums
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./artifacts/checksums.txt
          asset_name: checksums.txt
          asset_content_type: text/plain