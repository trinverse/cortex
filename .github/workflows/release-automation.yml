name: Automated Release Pipeline

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (without v prefix)'
        required: true
      prerelease:
        description: 'Is this a pre-release?'
        type: boolean
        default: false

env:
  CARGO_TERM_COLOR: always

jobs:
  # Validate version and prepare release
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
            IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
          else
            VERSION="${GITHUB_REF#refs/tags/v}"
            # Check if version contains pre-release identifier
            if [[ "$VERSION" == *"-"* ]]; then
              IS_PRERELEASE="true"
            else
              IS_PRERELEASE="false"
            fi
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          echo "Version: $VERSION (Pre-release: $IS_PRERELEASE)"
      
      - name: Validate version format
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if ! [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.]+)?$ ]]; then
            echo "::error::Invalid version format: $VERSION"
            exit 1
          fi

  # Build for all platforms
  build-release:
    name: Build ${{ matrix.name }}
    needs: prepare-release
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # macOS builds
          - name: macOS-x64
            os: macos-13
            target: x86_64-apple-darwin
            artifact_name: cortex-${{ needs.prepare-release.outputs.version }}-x86_64-apple-darwin
          
          - name: macOS-arm64
            os: macos-14
            target: aarch64-apple-darwin
            artifact_name: cortex-${{ needs.prepare-release.outputs.version }}-aarch64-apple-darwin
          
          # Linux builds
          - name: Linux-x64
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: cortex-${{ needs.prepare-release.outputs.version }}-x86_64-unknown-linux-gnu
          
          - name: Linux-arm64
            os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: cortex-${{ needs.prepare-release.outputs.version }}-aarch64-unknown-linux-gnu
            use_cross: true
          
          - name: Linux-musl
            os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact_name: cortex-${{ needs.prepare-release.outputs.version }}-x86_64-unknown-linux-musl
          
          # Windows builds
          - name: Windows-x64
            os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: cortex-${{ needs.prepare-release.outputs.version }}-x86_64-pc-windows-msvc
            extension: .exe
          
          - name: Windows-arm64
            os: windows-latest
            target: aarch64-pc-windows-msvc
            artifact_name: cortex-${{ needs.prepare-release.outputs.version }}-aarch64-pc-windows-msvc
            extension: .exe

    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Install musl tools
        if: contains(matrix.target, 'musl')
        run: sudo apt-get update && sudo apt-get install -y musl-tools
      
      - name: Install cross
        if: matrix.use_cross
        run: cargo install cross --git https://github.com/cross-rs/cross
      
      - name: Build release binary
        run: |
          if [ "${{ matrix.use_cross }}" = "true" ]; then
            cross build --release --target ${{ matrix.target }}
          else
            cargo build --release --target ${{ matrix.target }}
          fi
      
      - name: Package release
        shell: bash
        run: |
          mkdir -p dist
          
          # Copy binary
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp target/${{ matrix.target }}/release/cortex.exe dist/cortex.exe
          else
            cp target/${{ matrix.target }}/release/cortex dist/cortex
            chmod +x dist/cortex
          fi
          
          # Add README and LICENSE
          cp README.md dist/ 2>/dev/null || echo "No README.md found"
          cp LICENSE dist/ 2>/dev/null || echo "No LICENSE found"
          
          # Create archives
          cd dist
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            7z a -tzip ../${{ matrix.artifact_name }}.zip *
          else
            tar czf ../${{ matrix.artifact_name }}.tar.gz *
          fi
          cd ..
          
          # Generate checksums
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            certutil -hashfile ${{ matrix.artifact_name }}.zip SHA256 > ${{ matrix.artifact_name }}.zip.sha256
          else
            if [ "${{ matrix.os }}" = "macos-latest" ] || [ "${{ matrix.os }}" = "macos-13" ] || [ "${{ matrix.os }}" = "macos-14" ]; then
              shasum -a 256 ${{ matrix.artifact_name }}.tar.gz > ${{ matrix.artifact_name }}.tar.gz.sha256
            else
              sha256sum ${{ matrix.artifact_name }}.tar.gz > ${{ matrix.artifact_name }}.tar.gz.sha256
            fi
          fi
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: |
            *.tar.gz
            *.tar.gz.sha256
            *.zip
            *.zip.sha256

  # Create GitHub Release
  create-github-release:
    name: Create GitHub Release
    needs: [prepare-release, build-release]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Prepare release files
        run: |
          mkdir -p release
          find artifacts -type f \( -name "*.tar.gz*" -o -name "*.zip*" \) -exec cp {} release/ \;
          ls -la release/
      
      - name: Generate changelog
        id: changelog
        run: |
          VERSION="${{ needs.prepare-release.outputs.version }}"
          
          # Try to get changelog from CHANGELOG.md
          if [ -f CHANGELOG.md ]; then
            # Extract section for this version
            awk "/^## \[$VERSION\]/,/^## \[/" CHANGELOG.md | head -n -1 > changelog.txt
          fi
          
          # If no changelog found, generate from commits
          if [ ! -s changelog.txt ]; then
            echo "## What's Changed" > changelog.txt
            echo "" >> changelog.txt
            
            # Get previous tag
            PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
            
            if [ -n "$PREV_TAG" ]; then
              git log $PREV_TAG..HEAD --pretty=format:"- %s (%h)" >> changelog.txt
            else
              git log --pretty=format:"- %s (%h)" -n 20 >> changelog.txt
            fi
          fi
          
          echo "Changelog generated"
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: Cortex v${{ needs.prepare-release.outputs.version }}
          tag_name: v${{ needs.prepare-release.outputs.version }}
          body_path: changelog.txt
          draft: false
          prerelease: ${{ needs.prepare-release.outputs.is_prerelease }}
          files: release/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Publish to package managers
  publish-packages:
    name: Publish Packages
    needs: [prepare-release, create-github-release]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Check for existing workflows
        id: check-workflows
        run: |
          # Check which workflows exist and set outputs
          echo "has_homebrew=$(if [ -f .github/workflows/release-homebrew.yml ]; then echo true; else echo false; fi)" >> $GITHUB_OUTPUT
          echo "has_snap=$(if [ -f .github/workflows/publish-snap.yml ]; then echo true; else echo false; fi)" >> $GITHUB_OUTPUT
          echo "has_aur=$(if [ -f .github/workflows/publish-aur.yml ]; then echo true; else echo false; fi)" >> $GITHUB_OUTPUT
          echo "has_chocolatey=$(if [ -f .github/workflows/publish-chocolatey.yml ]; then echo true; else echo false; fi)" >> $GITHUB_OUTPUT
          echo "has_ppa=$(if [ -f .github/workflows/publish-ppa-all.yml ]; then echo true; else echo false; fi)" >> $GITHUB_OUTPUT
      
      - name: Trigger Homebrew update
        if: needs.prepare-release.outputs.is_prerelease == 'false' && steps.check-workflows.outputs.has_homebrew == 'true'
        run: |
          gh workflow run release-homebrew.yml \
            -f version="${{ needs.prepare-release.outputs.version }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true
      
      - name: Trigger Snap Store update
        if: needs.prepare-release.outputs.is_prerelease == 'false' && steps.check-workflows.outputs.has_snap == 'true'
        run: |
          gh workflow run publish-snap.yml \
            -f version="${{ needs.prepare-release.outputs.version }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true
      
      - name: Trigger AUR update
        if: needs.prepare-release.outputs.is_prerelease == 'false' && steps.check-workflows.outputs.has_aur == 'true'
        run: |
          gh workflow run publish-aur.yml \
            -f version="${{ needs.prepare-release.outputs.version }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true
      
      - name: Trigger Chocolatey update
        if: needs.prepare-release.outputs.is_prerelease == 'false' && steps.check-workflows.outputs.has_chocolatey == 'true'
        run: |
          gh workflow run publish-chocolatey.yml \
            -f version="${{ needs.prepare-release.outputs.version }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true
      
      - name: Trigger PPA update
        if: needs.prepare-release.outputs.is_prerelease == 'false' && steps.check-workflows.outputs.has_ppa == 'true'
        run: |
          gh workflow run publish-ppa-all.yml \
            -f version="${{ needs.prepare-release.outputs.version }}" \
            -f distribution="all"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

  # Announce release
  announce-release:
    name: Announce Release
    needs: [prepare-release, create-github-release, publish-packages]
    runs-on: ubuntu-latest
    if: needs.prepare-release.outputs.is_prerelease == 'false'
    steps:
      - name: Create announcement issue
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ needs.prepare-release.outputs.version }}';
            const issueTitle = `🎉 Release v${version} Published`;
            const issueBody = `
            ## Cortex v${version} has been released!
            
            ### 📦 Installation
            The new version is being distributed through:
            - **GitHub Releases**: Available now
            - **Homebrew**: Updates triggered
            - **Snap Store**: Updates triggered
            - **AUR**: Updates triggered
            - **Chocolatey**: Updates triggered
            - **PPA**: Updates triggered
            
            Package manager updates may take a few hours to propagate.
            
            ### 📋 Release Notes
            See the full [release notes](https://github.com/${{ github.repository }}/releases/tag/v${version})
            
            ### 🙏 Thank You
            Thank you to all contributors and users!
            `;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: issueTitle,
              body: issueBody,
              labels: ['announcement', 'release']
            });