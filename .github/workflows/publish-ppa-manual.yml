name: Manual PPA Publish

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish'
        required: true
        default: '0.1.0'
      distribution:
        description: 'Ubuntu distribution'
        required: true
        type: choice
        options:
          - focal
          - jammy
          - noble
          - all

jobs:
  publish:
    name: Publish to PPA
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            devscripts \
            debhelper \
            dput \
            gnupg \
            lintian \
            build-essential \
            cargo \
            rustc \
            pkg-config \
            libssl-dev
      
      - name: Setup GPG
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
        run: |
          # Import GPG key
          echo "$GPG_PRIVATE_KEY" | base64 --decode | gpg --batch --import
          
          # Configure GPG
          mkdir -p ~/.gnupg
          echo "allow-preset-passphrase" >> ~/.gnupg/gpg-agent.conf
          echo "use-agent" >> ~/.gnupg/gpg.conf
          echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
          gpg-connect-agent reloadagent /bye
          
          # Test signing
          echo "test" | gpg --batch --yes --passphrase "$GPG_PASSPHRASE" \
            --pinentry-mode loopback --armor --sign --local-user "$GPG_KEY_ID"
      
      - name: Prepare build environment
        run: |
          # Create build directory
          mkdir -p ~/ppa-build
          
          # Set version
          VERSION="${{ github.event.inputs.version }}"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          
          # Set distributions
          if [ "${{ github.event.inputs.distribution }}" = "all" ]; then
            echo "DISTRIBUTIONS=focal jammy noble" >> $GITHUB_ENV
          else
            echo "DISTRIBUTIONS=${{ github.event.inputs.distribution }}" >> $GITHUB_ENV
          fi
      
      - name: Build and upload packages
        env:
          DEBEMAIL: ${{ secrets.DEBEMAIL }}
          DEBFULLNAME: ${{ secrets.DEBFULLNAME }}
          GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          LAUNCHPAD_USERNAME: ${{ secrets.LAUNCHPAD_USERNAME }}
        run: |
          set -e
          
          for DIST in $DISTRIBUTIONS; do
            echo "Building for Ubuntu $DIST..."
            
            # Set version suffix
            if [ "$DIST" = "focal" ]; then
              FULL_VERSION="${VERSION}-1ubuntu1"
            else
              FULL_VERSION="${VERSION}-1ubuntu1~${DIST}1"
            fi
            
            # Prepare source
            BUILD_DIR=~/ppa-build
            WORK_DIR="$BUILD_DIR/cortex-${VERSION}"
            
            rm -rf "$WORK_DIR"
            mkdir -p "$WORK_DIR"
            
            # Copy source files
            tar --exclude='.git' --exclude='target' --exclude='*.deb' -cf - . | \
              (cd "$WORK_DIR" && tar -xf -)
            
            # Create orig tarball
            cd "$BUILD_DIR"
            tar czf "cortex_${VERSION}.orig.tar.gz" "cortex-${VERSION}"
            
            # Setup debian directory
            cd "$WORK_DIR"
            mkdir -p debian/source
            echo "3.0 (quilt)" > debian/source/format
            echo "12" > debian/compat
            
            # Create debian/control
            cat > debian/control << 'EOF'
Source: cortex
Section: utils
Priority: optional
Maintainer: Ashish Tyagi <ashishtyagi10@gmail.com>
Build-Depends: debhelper-compat (= 12),
               cargo,
               rustc (>= 1.70),
               pkg-config
Standards-Version: 4.5.1
Homepage: https://github.com/trinverse/cortex
Vcs-Browser: https://github.com/trinverse/cortex
Vcs-Git: https://github.com/trinverse/cortex.git

Package: cortex
Architecture: any
Depends: ${shlibs:Depends}, ${misc:Depends}
Description: Modern terminal file manager
 Cortex is a powerful terminal file manager written in Rust.
 Features dual-pane interface, vim-style navigation, and plugin support.
EOF
            
            # Create debian/rules
            cat > debian/rules << 'EOF'
#!/usr/bin/make -f

export DH_VERBOSE = 1
export CARGO_HOME = $(CURDIR)/debian/cargo

%:
	dh $@

override_dh_auto_build:
	cargo build --release --locked

override_dh_auto_install:
	install -Dm755 target/release/cortex debian/cortex/usr/bin/cortex

override_dh_auto_test:
	# Skip tests during build

override_dh_auto_clean:
	cargo clean
	dh_auto_clean
EOF
            chmod +x debian/rules
            
            # Create debian/changelog
            cat > debian/changelog << EOF
cortex (${FULL_VERSION}) ${DIST}; urgency=medium

  * Release version ${VERSION} for Ubuntu ${DIST}
  * Full feature set including dual-pane interface and plugin system

 -- ${DEBFULLNAME} <${DEBEMAIL}>  $(date -R)
EOF
            
            # Create debian/copyright
            cat > debian/copyright << 'EOF'
Format: https://www.debian.org/doc/packaging-manuals/copyright-format/1.0/
Upstream-Name: cortex
Source: https://github.com/trinverse/cortex

Files: *
Copyright: 2024-2025 Trinverse
License: MIT
 Permission is hereby granted, free of charge, to any person obtaining a
 copy of this software and associated documentation files (the "Software"),
 to deal in the Software without restriction, including without limitation
 the rights to use, copy, modify, merge, publish, distribute, sublicense,
 and/or sell copies of the Software, and to permit persons to whom the
 Software is furnished to do so, subject to the following conditions:
 .
 The above copyright notice and this permission notice shall be included
 in all copies or substantial portions of the Software.
 .
 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
EOF
            
            # Build source package
            echo "Building source package..."
            export GNUPGHOME=~/.gnupg
            
            debuild -S -sa -d \
              -k"$GPG_KEY_ID" \
              -p"gpg --batch --yes --passphrase-fd 0 --pinentry-mode loopback" \
              <<< "$GPG_PASSPHRASE"
            
            # Configure dput
            cat > ~/.dput.cf << EOF
[cortex-ppa]
fqdn = ppa.launchpad.net
method = ftp
incoming = ~${LAUNCHPAD_USERNAME}/ubuntu/cortex
login = anonymous
allow_unsigned_uploads = 0
EOF
            
            # Upload to PPA
            cd "$BUILD_DIR"
            echo "Uploading to PPA..."
            dput cortex-ppa "cortex_${FULL_VERSION}_source.changes"
            
            echo "Successfully uploaded $DIST package!"
          done
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ppa-source-packages
          path: ~/ppa-build/*.changes
      
      - name: Summary
        run: |
          echo "## ðŸ“¦ PPA Upload Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Uploaded Packages:" >> $GITHUB_STEP_SUMMARY
          echo "- Version: $VERSION" >> $GITHUB_STEP_SUMMARY
          echo "- Distributions: $DISTRIBUTIONS" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Check build status at: https://launchpad.net/~${{ secrets.LAUNCHPAD_USERNAME }}/+archive/ubuntu/cortex" >> $GITHUB_STEP_SUMMARY
          echo "2. Wait 15-60 minutes for packages to build" >> $GITHUB_STEP_SUMMARY
          echo "3. Test installation:" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "sudo add-apt-repository ppa:${{ secrets.LAUNCHPAD_USERNAME }}/cortex" >> $GITHUB_STEP_SUMMARY
          echo "sudo apt update" >> $GITHUB_STEP_SUMMARY
          echo "sudo apt install cortex" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY