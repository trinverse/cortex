name: Nightly Builds

on:
  schedule:
    # Run at 3 AM UTC every day
    - cron: '0 3 * * *'
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip tests'
        required: false
        type: boolean
        default: false

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build-matrix:
    name: Build ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # macOS builds
          - name: macOS-x64
            os: macos-13
            target: x86_64-apple-darwin
            artifact: cortex-nightly-macos-x64
          
          - name: macOS-arm64
            os: macos-14
            target: aarch64-apple-darwin
            artifact: cortex-nightly-macos-arm64
          
          # Linux builds
          - name: Linux-x64
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact: cortex-nightly-linux-x64
          
          - name: Linux-arm64
            os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact: cortex-nightly-linux-arm64
            use_cross: true
          
          # Windows builds
          - name: Windows-x64
            os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact: cortex-nightly-windows-x64
            extension: .exe
          
          - name: Windows-arm64
            os: windows-latest
            target: aarch64-pc-windows-msvc
            artifact: cortex-nightly-windows-arm64
            extension: .exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Rust
        uses: dtolnay/rust-toolchain@nightly
        with:
          targets: ${{ matrix.target }}

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-nightly-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Install cross-compilation tools
        if: matrix.use_cross
        run: |
          cargo install cross --git https://github.com/cross-rs/cross

      - name: Build (native)
        if: '!matrix.use_cross'
        run: cargo build --release --target ${{ matrix.target }}

      - name: Build (cross)
        if: matrix.use_cross
        run: cross build --release --target ${{ matrix.target }}

      - name: Run tests
        if: '!matrix.use_cross && !inputs.skip_tests'
        run: cargo test --release --target ${{ matrix.target }}

      - name: Package artifacts
        shell: bash
        run: |
          mkdir -p dist
          
          # Get the git commit hash for versioning
          COMMIT_HASH=$(git rev-parse --short HEAD)
          DATE=$(date +%Y%m%d)
          
          # Copy binary
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp target/${{ matrix.target }}/release/cortex.exe dist/cortex${{ matrix.extension }}
          else
            cp target/${{ matrix.target }}/release/cortex dist/cortex${{ matrix.extension }}
            chmod +x dist/cortex${{ matrix.extension }}
          fi
          
          # Create version info file
          echo "Nightly Build ${DATE}-${COMMIT_HASH}" > dist/VERSION
          echo "Target: ${{ matrix.target }}" >> dist/VERSION
          echo "Built: $(date -u)" >> dist/VERSION
          
          # Create tarball/zip
          cd dist
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            7z a -tzip ../${{ matrix.artifact }}-${DATE}-${COMMIT_HASH}.zip *
          else
            tar czf ../${{ matrix.artifact }}-${DATE}-${COMMIT_HASH}.tar.gz *
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: |
            *.tar.gz
            *.zip
          retention-days: 7

  create-nightly-release:
    name: Create Nightly Release
    needs: build-matrix
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v5
        with:
          path: artifacts

      - name: Prepare release files
        run: |
          mkdir -p release
          find artifacts -type f \( -name "*.tar.gz" -o -name "*.zip" \) -exec cp {} release/ \;
          ls -la release/
          
          # Generate changelog for the last 24 hours
          echo "## Nightly Build - $(date +%Y-%m-%d)" > NIGHTLY_NOTES.md
          echo "" >> NIGHTLY_NOTES.md
          echo "### Recent Changes" >> NIGHTLY_NOTES.md
          git log --since="24 hours ago" --pretty=format:"- %s (%h)" >> NIGHTLY_NOTES.md || echo "No changes in the last 24 hours" >> NIGHTLY_NOTES.md
          echo "" >> NIGHTLY_NOTES.md
          echo "### Artifacts" >> NIGHTLY_NOTES.md
          echo "This is an automated nightly build. Use at your own risk." >> NIGHTLY_NOTES.md
          echo "" >> NIGHTLY_NOTES.md
          echo "Available builds:" >> NIGHTLY_NOTES.md
          for file in release/*; do
            echo "- $(basename $file)" >> NIGHTLY_NOTES.md
          done

      - name: Delete old nightly release
        uses: dev-drprasad/delete-tag-and-release@v1.1
        with:
          tag_name: nightly
          github_token: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: Create nightly release
        uses: softprops/action-gh-release@v1
        with:
          name: Nightly Build
          tag_name: nightly
          prerelease: true
          body_path: NIGHTLY_NOTES.md
          files: release/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify-failures:
    name: Notify Build Failures
    needs: [build-matrix, create-nightly-release]
    runs-on: ubuntu-latest
    if: failure()
    steps:
      - name: Create issue for failed build
        uses: actions/github-script@v7
        with:
          script: |
            const date = new Date().toISOString().split('T')[0];
            const title = `Nightly Build Failed - ${date}`;
            
            // Check if issue already exists
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'nightly-build-failure',
              state: 'open'
            });
            
            const existingIssue = issues.data.find(issue => issue.title === title);
            
            if (!existingIssue) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: `The nightly build failed on ${date}.\n\nCheck the [workflow run](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) for details.`,
                labels: ['nightly-build-failure', 'automated']
              });
            }