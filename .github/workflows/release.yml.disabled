name: Release

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type (patch, minor, major)'
        required: false
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

permissions:
  contents: write
  pull-requests: write

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
      
      - name: Get current version
        id: current_version
        run: |
          # Extract version from Cargo.toml
          VERSION=$(grep "^version" Cargo.toml | head -1 | cut -d'"' -f2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $VERSION"
      
      - name: Calculate new version
        id: new_version
        run: |
          CURRENT="${{ steps.current_version.outputs.version }}"
          BUMP_TYPE="${{ github.event.inputs.version_bump || 'patch' }}"
          
          # Parse current version
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT"
          MAJOR="${VERSION_PARTS[0]}"
          MINOR="${VERSION_PARTS[1]}"
          PATCH="${VERSION_PARTS[2]}"
          
          # Increment based on bump type
          case "$BUMP_TYPE" in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"
      
      - name: Update version in Cargo.toml files
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.version }}"
          
          # Update all Cargo.toml files
          find . -name "Cargo.toml" -type f | while read -r file; do
            if grep -q "^version = " "$file"; then
              sed -i "0,/^version = /s/^version = .*/version = \"$NEW_VERSION\"/" "$file"
              echo "Updated version in $file"
            fi
          done
          
          # Update Cargo.lock
          cargo update --workspace
      
      - name: Commit version changes
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.version }}"
          git add .
          git commit -m "chore: bump version to v$NEW_VERSION" || echo "No changes to commit"
      
      - name: Create and push tag
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.version }}"
          git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION"
          git push origin main --follow-tags
      
      - name: Generate changelog
        id: changelog
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.version }}"
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -z "$PREVIOUS_TAG" ]; then
            echo "No previous tag found, using all commits"
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            echo "Generating changelog from $PREVIOUS_TAG to HEAD"
            CHANGELOG=$(git log "$PREVIOUS_TAG"..HEAD --pretty=format:"- %s (%h)" --no-merges)
          fi
          
          # Format changelog
          {
            echo "changelog<<EOF"
            echo "## What's Changed"
            echo ""
            echo "$CHANGELOG" | grep -E "^- feat:" | sed 's/^- feat:/- ✨/' || true
            echo "$CHANGELOG" | grep -E "^- fix:" | sed 's/^- fix:/- 🐛/' || true
            echo "$CHANGELOG" | grep -E "^- docs:" | sed 's/^- docs:/- 📚/' || true
            echo "$CHANGELOG" | grep -E "^- style:" | sed 's/^- style:/- 💄/' || true
            echo "$CHANGELOG" | grep -E "^- refactor:" | sed 's/^- refactor:/- ♻️/' || true
            echo "$CHANGELOG" | grep -E "^- perf:" | sed 's/^- perf:/- ⚡/' || true
            echo "$CHANGELOG" | grep -E "^- test:" | sed 's/^- test:/- ✅/' || true
            echo "$CHANGELOG" | grep -E "^- chore:" | sed 's/^- chore:/- 🔧/' || true
            echo "$CHANGELOG" | grep -vE "^- (feat|fix|docs|style|refactor|perf|test|chore):" | head -20 || true
            echo ""
            echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/${PREVIOUS_TAG}...v${NEW_VERSION}"
            echo "EOF"
          } >> $GITHUB_OUTPUT
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.new_version.outputs.version }}
          name: Release v${{ steps.new_version.outputs.version }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false
          generate_release_notes: true
      
      - name: Trigger build workflow
        run: |
          gh workflow run build-release.yml \
            --ref "v${{ steps.new_version.outputs.version }}" \
            -f version="${{ steps.new_version.outputs.version }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}