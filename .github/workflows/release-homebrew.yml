name: Release and Update Homebrew

on:
  push:
    tags:
      - 'v*'
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (without v prefix)'
        required: true
        default: '0.1.0'

jobs:
  build-binaries:
    name: Build ${{ matrix.os }} ${{ matrix.arch }}
    runs-on: ${{ matrix.runner }}
    # Only run build if triggered by tag push or workflow_dispatch
    # Skip if triggered by release event (binaries already exist)
    if: github.event_name != 'release'
    strategy:
      matrix:
        include:
          - os: macos
            arch: x86_64
            runner: macos-13  # Intel Mac
            target: x86_64-apple-darwin
          - os: macos
            arch: aarch64
            runner: macos-14  # Apple Silicon Mac
            target: aarch64-apple-darwin
          - os: linux
            arch: x86_64
            runner: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: linux
            arch: aarch64
            runner: ubuntu-latest
            target: aarch64-unknown-linux-gnu
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Install cross-compilation tools (Linux ARM64)
        if: matrix.os == 'linux' && matrix.arch == 'aarch64'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
      
      - name: Build
        run: |
          if [ "${{ matrix.os }}" = "linux" ] && [ "${{ matrix.arch }}" = "aarch64" ]; then
            export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
            cargo build --release --target ${{ matrix.target }}
          else
            cargo build --release --target ${{ matrix.target }}
          fi
      
      - name: Package
        run: |
          VERSION="${{ github.event.inputs.version || github.ref_name }}"
          VERSION="${VERSION#v}"  # Remove 'v' prefix if present
          
          mkdir -p dist
          cp target/${{ matrix.target }}/release/cortex dist/
          cd dist
          
          # Create tarball with consistent naming
          tar czf "cortex-${VERSION}-${{ matrix.target }}.tar.gz" cortex
          
          # Generate SHA256
          if [ "${{ matrix.os }}" = "macos" ]; then
            shasum -a 256 "cortex-${VERSION}-${{ matrix.target }}.tar.gz" > "cortex-${VERSION}-${{ matrix.target }}.tar.gz.sha256"
          else
            sha256sum "cortex-${VERSION}-${{ matrix.target }}.tar.gz" > "cortex-${VERSION}-${{ matrix.target }}.tar.gz.sha256"
          fi
          
          echo "SHA256: $(cat *.sha256)"
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cortex-${{ matrix.target }}
          path: dist/*.tar.gz*

  create-release:
    name: Create GitHub Release
    needs: build-binaries
    runs-on: ubuntu-latest
    # Only create release if we built binaries (not triggered by release event)
    if: github.event_name != 'release'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Gather release files
        run: |
          mkdir -p release
          find artifacts -name "*.tar.gz*" -exec cp {} release/ \;
          ls -la release/
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: Cortex ${{ github.event.inputs.version || github.ref_name }}
          tag_name: ${{ github.ref_name || format('v{0}', github.event.inputs.version) }}
          draft: false
          prerelease: false
          files: release/*
          body: |
            # Cortex ${{ github.event.inputs.version || github.ref_name }}
            
            Modern terminal file manager with dual-pane interface.
            
            ## Installation
            
            ### Homebrew (macOS/Linux)
            ```bash
            brew tap trinverse/cortex
            brew install cortex
            ```
            
            ### Ubuntu/Debian
            ```bash
            sudo add-apt-repository ppa:ashishtyagi10/cortex
            sudo apt update
            sudo apt install cortex
            ```
            
            ### Manual Download
            Download the appropriate binary for your system from the assets below.
            
            ## Features
            - 📁 Dual-pane interface
            - ⌨️ Vim-style navigation
            - 🔌 Plugin system with Lua support
            - 🎨 Customizable themes
            - 📦 Archive support
            - 🔍 Advanced search capabilities
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  update-homebrew-formula:
    name: Update Homebrew Formula
    needs: [build-binaries, create-release]
    # Always run except when no builds were done
    if: always() && (needs.build-binaries.result == 'success' || needs.build-binaries.result == 'skipped')
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout main repository
        uses: actions/checkout@v4
      
      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            VERSION="${{ github.event.release.tag_name }}"
            VERSION="${VERSION#v}"
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${{ github.ref_name }}"
            VERSION="${VERSION#v}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      
      # Download artifacts if we built them
      - name: Download build artifacts
        if: github.event_name != 'release'
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      # Download from release if triggered by release event
      - name: Download release artifacts
        if: github.event_name == 'release'
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          mkdir -p artifacts
          
          # Download all platform builds
          wget -q "https://github.com/${{ github.repository }}/releases/download/v$VERSION/cortex-$VERSION-x86_64-apple-darwin.tar.gz" -P artifacts/
          wget -q "https://github.com/${{ github.repository }}/releases/download/v$VERSION/cortex-$VERSION-aarch64-apple-darwin.tar.gz" -P artifacts/
          wget -q "https://github.com/${{ github.repository }}/releases/download/v$VERSION/cortex-$VERSION-x86_64-unknown-linux-gnu.tar.gz" -P artifacts/
          wget -q "https://github.com/${{ github.repository }}/releases/download/v$VERSION/cortex-$VERSION-aarch64-unknown-linux-gnu.tar.gz" -P artifacts/
      
      - name: Calculate checksums
        id: checksums
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          
          # Find and calculate checksums
          if [ "${{ github.event_name }}" = "release" ]; then
            # Files downloaded directly
            SHA_DARWIN_X64=$(sha256sum artifacts/cortex-*-x86_64-apple-darwin.tar.gz | cut -d' ' -f1)
            SHA_DARWIN_ARM64=$(sha256sum artifacts/cortex-*-aarch64-apple-darwin.tar.gz | cut -d' ' -f1)
            SHA_LINUX_X64=$(sha256sum artifacts/cortex-*-x86_64-unknown-linux-gnu.tar.gz | cut -d' ' -f1)
            SHA_LINUX_ARM64=$(sha256sum artifacts/cortex-*-aarch64-unknown-linux-gnu.tar.gz | cut -d' ' -f1)
          else
            # Files from build artifacts
            SHA_DARWIN_X64=$(find artifacts -name "*x86_64-apple-darwin.tar.gz.sha256" -exec cat {} \; | cut -d' ' -f1)
            SHA_DARWIN_ARM64=$(find artifacts -name "*aarch64-apple-darwin.tar.gz.sha256" -exec cat {} \; | cut -d' ' -f1)
            SHA_LINUX_X64=$(find artifacts -name "*x86_64-unknown-linux-gnu.tar.gz.sha256" -exec cat {} \; | cut -d' ' -f1)
            SHA_LINUX_ARM64=$(find artifacts -name "*aarch64-unknown-linux-gnu.tar.gz.sha256" -exec cat {} \; | cut -d' ' -f1)
          fi
          
          echo "darwin_x64=$SHA_DARWIN_X64" >> $GITHUB_OUTPUT
          echo "darwin_arm64=$SHA_DARWIN_ARM64" >> $GITHUB_OUTPUT
          echo "linux_x64=$SHA_LINUX_X64" >> $GITHUB_OUTPUT
          echo "linux_arm64=$SHA_LINUX_ARM64" >> $GITHUB_OUTPUT
      
      - name: Generate Homebrew Formula
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          SHA_DARWIN_X64="${{ steps.checksums.outputs.darwin_x64 }}"
          SHA_DARWIN_ARM64="${{ steps.checksums.outputs.darwin_arm64 }}"
          SHA_LINUX_X64="${{ steps.checksums.outputs.linux_x64 }}"
          SHA_LINUX_ARM64="${{ steps.checksums.outputs.linux_arm64 }}"
          
          mkdir -p Formula
          cat > Formula/cortex.rb << EOF
          class Cortex < Formula
            desc "Modern terminal file manager with dual-pane interface"
            homepage "https://github.com/${{ github.repository }}"
            version "$VERSION"
            license "MIT"
          
            on_macos do
              if Hardware::CPU.arm?
                url "https://github.com/${{ github.repository }}/releases/download/v$VERSION/cortex-$VERSION-aarch64-apple-darwin.tar.gz"
                sha256 "$SHA_DARWIN_ARM64"
              else
                url "https://github.com/${{ github.repository }}/releases/download/v$VERSION/cortex-$VERSION-x86_64-apple-darwin.tar.gz"
                sha256 "$SHA_DARWIN_X64"
              end
            end
          
            on_linux do
              if Hardware::CPU.arm? && Hardware::CPU.is_64_bit?
                url "https://github.com/${{ github.repository }}/releases/download/v$VERSION/cortex-$VERSION-aarch64-unknown-linux-gnu.tar.gz"
                sha256 "$SHA_LINUX_ARM64"
              else
                url "https://github.com/${{ github.repository }}/releases/download/v$VERSION/cortex-$VERSION-x86_64-unknown-linux-gnu.tar.gz"
                sha256 "$SHA_LINUX_X64"
              end
            end
          
            def install
              bin.install "cortex"
            end
          
            test do
              assert_match "Cortex", shell_output("#{bin}/cortex --version")
            end
          end
          EOF
          
          echo "Formula generated successfully:"
          cat Formula/cortex.rb
      
      # Update formula in main repository
      - name: Commit formula to main repo
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add Formula/cortex.rb
          git diff --staged --quiet || git commit -m "chore: Update Homebrew formula for v${{ steps.get_version.outputs.version }}"
          git push || echo "No changes to push"
      
      # Create PR to Homebrew tap repository
      - name: Create Pull Request to Homebrew Tap
        if: secrets.HOMEBREW_TAP_TOKEN != ''
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.HOMEBREW_TAP_TOKEN }}
          push-to-fork: trinverse/homebrew-cortex
          repository: ${{ github.repository_owner }}/homebrew-cortex
          commit-message: "Update Cortex to v${{ steps.get_version.outputs.version }}"
          branch: update-v${{ steps.get_version.outputs.version }}
          title: "Update Cortex to v${{ steps.get_version.outputs.version }}"
          body: |
            Updates Cortex formula to version ${{ steps.get_version.outputs.version }}
            
            Release notes: https://github.com/${{ github.repository }}/releases/tag/v${{ steps.get_version.outputs.version }}
          base: main