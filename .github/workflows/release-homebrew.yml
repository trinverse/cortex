name: Release for Homebrew

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (without v prefix)'
        required: true
        default: '0.1.0'

jobs:
  build-binaries:
    name: Build ${{ matrix.os }} ${{ matrix.arch }}
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - os: macos
            arch: x86_64
            runner: macos-13  # Intel Mac
            target: x86_64-apple-darwin
          - os: macos
            arch: aarch64
            runner: macos-14  # Apple Silicon Mac
            target: aarch64-apple-darwin
          - os: linux
            arch: x86_64
            runner: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: linux
            arch: aarch64
            runner: ubuntu-latest
            target: aarch64-unknown-linux-gnu
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Install cross-compilation tools (Linux ARM64)
        if: matrix.os == 'linux' && matrix.arch == 'aarch64'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
      
      - name: Build
        run: |
          if [ "${{ matrix.os }}" = "linux" ] && [ "${{ matrix.arch }}" = "aarch64" ]; then
            export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
            cargo build --release --target ${{ matrix.target }}
          else
            cargo build --release --target ${{ matrix.target }}
          fi
      
      - name: Package
        run: |
          VERSION="${{ github.event.inputs.version || github.ref_name }}"
          VERSION="${VERSION#v}"  # Remove 'v' prefix if present
          
          mkdir -p dist
          cp target/${{ matrix.target }}/release/cortex dist/
          cd dist
          
          # Create tarball
          tar czf "cortex-${VERSION}-${{ matrix.os }}-${{ matrix.arch }}.tar.gz" cortex
          
          # Generate SHA256
          if [ "${{ matrix.os }}" = "macos" ]; then
            shasum -a 256 "cortex-${VERSION}-${{ matrix.os }}-${{ matrix.arch }}.tar.gz" > "cortex-${VERSION}-${{ matrix.os }}-${{ matrix.arch }}.tar.gz.sha256"
          else
            sha256sum "cortex-${VERSION}-${{ matrix.os }}-${{ matrix.arch }}.tar.gz" > "cortex-${VERSION}-${{ matrix.os }}-${{ matrix.arch }}.tar.gz.sha256"
          fi
          
          echo "SHA256: $(cat *.sha256)"
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cortex-${{ matrix.os }}-${{ matrix.arch }}
          path: dist/*.tar.gz*

  create-release:
    name: Create GitHub Release
    needs: build-binaries
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Gather release files
        run: |
          mkdir -p release
          find artifacts -name "*.tar.gz*" -exec cp {} release/ \;
          ls -la release/
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: Cortex ${{ github.event.inputs.version || github.ref_name }}
          tag_name: ${{ github.ref_name || format('v{0}', github.event.inputs.version) }}
          draft: false
          prerelease: false
          files: release/*
          body: |
            # Cortex ${{ github.event.inputs.version || github.ref_name }}
            
            Modern terminal file manager with dual-pane interface.
            
            ## Installation
            
            ### Homebrew (macOS/Linux)
            ```bash
            brew tap trinverse/cortex
            brew install cortex
            ```
            
            ### Ubuntu/Debian
            ```bash
            sudo add-apt-repository ppa:ashishtyagi10/cortex
            sudo apt update
            sudo apt install cortex
            ```
            
            ### Manual Download
            Download the appropriate binary for your system from the assets below.
            
            ## Features
            - 📁 Dual-pane interface
            - ⌨️ Vim-style navigation
            - 🔌 Plugin system with Lua support
            - 🎨 Customizable themes
            - 📦 Archive support
            - 🔍 Advanced search capabilities
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  update-homebrew-tap:
    name: Update Homebrew Tap
    needs: create-release
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout tap repository
        uses: actions/checkout@v4
        with:
          repository: trinverse/homebrew-cortex
          token: ${{ secrets.GITHUB_TOKEN }}
          path: homebrew-cortex
      
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Update Formula
        run: |
          VERSION="${{ github.event.inputs.version || github.ref_name }}"
          VERSION="${VERSION#v}"
          
          # Get SHA256 values
          SHA_MACOS_X86=$(cat artifacts/cortex-macos-x86_64/*.sha256 | cut -d' ' -f1)
          SHA_MACOS_ARM=$(cat artifacts/cortex-macos-aarch64/*.sha256 | cut -d' ' -f1)
          SHA_LINUX_X86=$(cat artifacts/cortex-linux-x86_64/*.sha256 | cut -d' ' -f1)
          SHA_LINUX_ARM=$(cat artifacts/cortex-linux-aarch64/*.sha256 | cut -d' ' -f1)
          
          # Create formula
          cat > homebrew-cortex/Formula/cortex.rb << EOF
          class Cortex < Formula
            desc "Modern terminal file manager with dual-pane interface"
            homepage "https://github.com/trinverse/cortex"
            version "${VERSION}"
            license "MIT"
          
            on_macos do
              if Hardware::CPU.arm?
                url "https://github.com/trinverse/cortex/releases/download/v${VERSION}/cortex-${VERSION}-macos-aarch64.tar.gz"
                sha256 "${SHA_MACOS_ARM}"
              else
                url "https://github.com/trinverse/cortex/releases/download/v${VERSION}/cortex-${VERSION}-macos-x86_64.tar.gz"
                sha256 "${SHA_MACOS_X86}"
              end
            end
          
            on_linux do
              if Hardware::CPU.arm? && Hardware::CPU.is_64_bit?
                url "https://github.com/trinverse/cortex/releases/download/v${VERSION}/cortex-${VERSION}-linux-aarch64.tar.gz"
                sha256 "${SHA_LINUX_ARM}"
              else
                url "https://github.com/trinverse/cortex/releases/download/v${VERSION}/cortex-${VERSION}-linux-x86_64.tar.gz"
                sha256 "${SHA_LINUX_X86}"
              end
            end
          
            def install
              bin.install "cortex"
            end
          
            test do
              assert_match "Cortex", shell_output("#{bin}/cortex --version")
            end
          end
          EOF
      
      - name: Commit and push
        run: |
          cd homebrew-cortex
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add Formula/cortex.rb
          git commit -m "Update Cortex to ${{ github.event.inputs.version || github.ref_name }}"
          git push