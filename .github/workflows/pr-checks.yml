name: Pull Request Checks

on:
  pull_request:
    types: [opened, synchronize, reopened]
  merge_group:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Quick format and lint checks
  quick-checks:
    name: Quick Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      
      - name: Check formatting
        run: cargo fmt -- --check
      
      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings
      
      - name: Check documentation
        run: cargo doc --no-deps --all-features
        env:
          RUSTDOCFLAGS: "-D warnings"

  # Comprehensive testing matrix
  test-matrix:
    name: Test ${{ matrix.name }}
    needs: quick-checks
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Linux
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            coverage: true
          
          - name: macOS
            os: macos-latest
            target: x86_64-apple-darwin
            coverage: false
          
          - name: Windows
            os: windows-latest
            target: x86_64-pc-windows-msvc
            coverage: false

    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libx11-dev libxcb1-dev
      
      - name: Build
        run: cargo build --target ${{ matrix.target }} --all-features
      
      - name: Run tests
        run: cargo test --target ${{ matrix.target }} --all-features
      
      - name: Install cargo-tarpaulin
        if: matrix.coverage
        run: cargo install cargo-tarpaulin
      
      - name: Generate coverage
        if: matrix.coverage
        run: cargo tarpaulin --out xml --all-features --workspace
      
      - name: Upload coverage to Codecov
        if: matrix.coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./cobertura.xml
          fail_ci_if_error: false
          verbose: true

  # Check for common issues
  additional-checks:
    name: Additional Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install Rust nightly
        uses: dtolnay/rust-toolchain@nightly
      
      - name: Check for uncommitted Cargo.lock changes
        run: |
          cargo generate-lockfile
          git diff --exit-code Cargo.lock
      
      - name: Check for unused dependencies
        run: |
          cargo install cargo-udeps --locked
          cargo +nightly udeps --all-targets --all-features
        continue-on-error: true
      
      - name: Check MSRV (Minimum Supported Rust Version)
        run: |
          cargo install cargo-msrv --locked
          cargo msrv verify
        continue-on-error: true

  # Performance benchmarks (only on main PRs)
  benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.base_ref == 'main'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-bench-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Run benchmarks
        run: cargo bench --all-features -- --output-format bencher | tee output.txt
        continue-on-error: true
      
      - name: Store benchmark result
        uses: benchmark-action/github-action-benchmark@v1
        with:
          tool: 'cargo'
          output-file-path: output.txt
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: false
          comment-on-alert: true
          alert-threshold: '150%'
          fail-on-alert: false
          summary-always: true

  # Size analysis
  size-analysis:
    name: Binary Size Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Build release binary
        run: cargo build --release
      
      - name: Analyze binary size
        run: |
          ls -lh target/release/cortex
          size target/release/cortex || true
          
          # Install cargo-bloat for detailed analysis
          cargo install cargo-bloat --locked
          cargo bloat --release --crates
          cargo bloat --release -n 20
      
      - name: Check binary size threshold
        run: |
          SIZE=$(stat -c%s target/release/cortex 2>/dev/null || stat -f%z target/release/cortex)
          MAX_SIZE=$((50 * 1024 * 1024))  # 50MB threshold
          
          if [ $SIZE -gt $MAX_SIZE ]; then
            echo "::warning::Binary size ($SIZE bytes) exceeds threshold ($MAX_SIZE bytes)"
          else
            echo "Binary size: $SIZE bytes (within threshold)"
          fi

  # All checks passed
  pr-ready:
    name: PR Ready
    needs: [quick-checks, test-matrix, additional-checks]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check results
        run: |
          if [ "${{ needs.quick-checks.result }}" != "success" ] || \
             [ "${{ needs.test-matrix.result }}" != "success" ] || \
             [ "${{ needs.additional-checks.result }}" != "success" ]; then
            echo "::error::Some checks failed. Please fix the issues before merging."
            exit 1
          fi
          echo "All required checks passed!"