name: Publish to Chocolatey

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish'
        required: true

jobs:
  publish-chocolatey:
    name: Publish to Chocolatey
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Get version
        id: get_version
        run: |
          if ("${{ github.event_name }}" -eq "workflow_dispatch") {
            $version = "${{ github.event.inputs.version }}"
          } else {
            $version = "${{ github.event.release.tag_name }}".TrimStart('v')
          }
          echo "version=$version" >> $env:GITHUB_OUTPUT
      
      - name: Download Windows installer
        run: |
          $version = "${{ steps.get_version.outputs.version }}"
          $url = "https://github.com/${{ github.repository }}/releases/download/v$version/cortex-$version-x64.msi"
          Invoke-WebRequest -Uri $url -OutFile cortex.msi
      
      - name: Calculate checksum
        id: checksum
        run: |
          $hash = (Get-FileHash -Path cortex.msi -Algorithm SHA256).Hash
          echo "sha256=$hash" >> $env:GITHUB_OUTPUT
      
      - name: Create Chocolatey package
        run: |
          $version = "${{ steps.get_version.outputs.version }}"
          $checksum = "${{ steps.checksum.outputs.sha256 }}"
          
          # Create package directory
          New-Item -ItemType Directory -Force -Path choco-package/tools
          
          # Create nuspec file
          @"
          <?xml version="1.0" encoding="utf-8"?>
          <package xmlns="http://schemas.microsoft.com/packaging/2015/06/nuspec.xsd">
            <metadata>
              <id>cortex</id>
              <version>$version</version>
              <title>Cortex File Manager</title>
              <authors>Cortex Team</authors>
              <projectUrl>https://github.com/${{ github.repository }}</projectUrl>
              <iconUrl>https://raw.githubusercontent.com/${{ github.repository }}/main/assets/icon.png</iconUrl>
              <copyright>2025 Cortex Team</copyright>
              <licenseUrl>https://github.com/${{ github.repository }}/blob/main/LICENSE</licenseUrl>
              <requireLicenseAcceptance>false</requireLicenseAcceptance>
              <projectSourceUrl>https://github.com/${{ github.repository }}</projectSourceUrl>
              <docsUrl>https://github.com/${{ github.repository }}/wiki</docsUrl>
              <bugTrackerUrl>https://github.com/${{ github.repository }}/issues</bugTrackerUrl>
              <tags>filemanager terminal cli rust productivity</tags>
              <summary>A modern, powerful terminal file manager</summary>
              <description>
                Cortex is a modern terminal file manager built with Rust, designed for power users who demand efficiency, extensibility, and performance.
                
                ## Features
                - Dual-pane interface
                - Advanced file operations
                - Plugin system (Lua)
                - Archive support
                - Network operations
                - Cross-platform
              </description>
              <releaseNotes>https://github.com/${{ github.repository }}/releases/tag/v$version</releaseNotes>
            </metadata>
            <files>
              <file src="tools\**" target="tools" />
            </files>
          </package>
          "@ | Out-File -FilePath choco-package/cortex.nuspec -Encoding UTF8
          
          # Create install script
          @"
          `$ErrorActionPreference = 'Stop'
          `$toolsDir = "`$(Split-Path -parent `$MyInvocation.MyCommand.Definition)"
          `$url = 'https://github.com/${{ github.repository }}/releases/download/v$version/cortex-$version-x64.msi'
          `$checksum = '$checksum'
          
          `$packageArgs = @{
            packageName    = 'cortex'
            fileType       = 'MSI'
            url            = `$url
            softwareName   = 'Cortex*'
            checksum       = `$checksum
            checksumType   = 'sha256'
            silentArgs     = "/qn /norestart"
            validExitCodes = @(0, 3010, 1641)
          }
          
          Install-ChocolateyPackage @packageArgs
          "@ | Out-File -FilePath choco-package/tools/chocolateyinstall.ps1 -Encoding UTF8
          
          # Create uninstall script
          @"
          `$ErrorActionPreference = 'Stop'
          `$packageArgs = @{
            packageName    = 'cortex'
            softwareName   = 'Cortex*'
            fileType       = 'MSI'
            silentArgs     = "/qn /norestart"
            validExitCodes = @(0, 3010, 1605, 1614, 1641)
          }
          
          `$uninstalled = `$false
          [array]`$key = Get-UninstallRegistryKey -SoftwareName `$packageArgs['softwareName']
          
          if (`$key.Count -eq 1) {
            `$key | % { 
              `$packageArgs['file'] = "`$(`$_.UninstallString)"
              Uninstall-ChocolateyPackage @packageArgs
            }
          }
          "@ | Out-File -FilePath choco-package/tools/chocolateyuninstall.ps1 -Encoding UTF8
      
      - name: Pack Chocolatey package
        run: |
          cd choco-package
          choco pack
      
      - name: Push to Chocolatey
        env:
          CHOCOLATEY_API_KEY: ${{ secrets.CHOCOLATEY_API_KEY }}
        run: |
          cd choco-package
          choco push cortex.${{ steps.get_version.outputs.version }}.nupkg --source https://push.chocolatey.org/ --api-key $env:CHOCOLATEY_API_KEY